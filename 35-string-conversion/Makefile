ifeq ($(CC),cc)
    CC = gcc
endif

CFLAGS = -std=c17 -Wall -Wextra -Werror -pedantic -Wconversion -Wshadow -Wformat=2 -Winit-self -Wswitch-default \
         -Wswitch-enum -Wfloat-equal -Wcast-align -Wpointer-arith -Wmissing-prototypes -Wstrict-prototypes \
         -Wundef -Wstrict-overflow=5 -Wwrite-strings -Wredundant-decls -Winline -Wvla -Wdouble-promotion \
         -Wdeclaration-after-statement
SANITIZERS = -fsanitize=address -fsanitize=undefined -fsanitize=leak
SUPPORTED_SANITIZERS =
CHECKER_REPORT_FILE = cppcheck-report.txt
REPORT_DIR = scan-results

# Source and binary definitions for the new set of files
DOUBLE_TO_STRING_SOURCES = double-to-string.c
DOUBLE_TO_STRING_BINARY = double-to-string
FLOAT_TO_STRING_SOURCES = float-to-string.c
FLOAT_TO_STRING_BINARY = float-to-string
INT_TO_STRING_SOURCES = int-to-string.c
INT_TO_STRING_BINARY = int-to-string
INTMAX_T_TO_STRING_SOURCES = intmax_t-to-string.c
INTMAX_T_TO_STRING_BINARY = intmax_t-to-string
LONG_TO_STRING_SOURCES = long-to-string.c
LONG_TO_STRING_BINARY = long-to-string
LONG_DOUBLE_TO_STRING_SOURCES = long-double-to-string.c
LONG_DOUBLE_TO_STRING_BINARY = long-double-to-string
LONG_LONG_TO_STRING_SOURCES = long-long-to-string.c
LONG_LONG_TO_STRING_BINARY = long-long-to-string
STRING_TO_DOUBLE_SOURCES = string-to-double.c
STRING_TO_DOUBLE_BINARY = string-to-double
STRING_TO_FLOAT_SOURCES = string-to-float.c
STRING_TO_FLOAT_BINARY = string-to-float
STRING_TO_INT_SOURCES = string-to-int.c
STRING_TO_INT_BINARY = string-to-int
STRING_TO_INTMAX_T_SOURCES = string-to-intmax_t.c
STRING_TO_INTMAX_T_BINARY = string-to-intmax_t
STRING_TO_LONG_SOURCES = string-to-long.c
STRING_TO_LONG_BINARY = string-to-long
STRING_TO_LONG_DOUBLE_SOURCES = string-to-long-double.c
STRING_TO_LONG_DOUBLE_BINARY = string-to-long-double
STRING_TO_LONG_LONG_SOURCES = string-to-long-long.c
STRING_TO_LONG_LONG_BINARY = string-to-long-long
STRING_TO_UNSIGNED_INT_SOURCES = string-to-unsigned-int.c
STRING_TO_UNSIGNED_INT_BINARY = string-to-unsigned-int
STRING_TO_UNSIGNED_LONG_SOURCES = string-to-unsigned-long.c
STRING_TO_UNSIGNED_LONG_BINARY = string-to-unsigned-long
STRING_TO_UNSIGNED_LONG_LONG_SOURCES = string-to-unsigned-long-long.c
STRING_TO_UNSIGNED_LONG_LONG_BINARY = string-to-unsigned-long-long
STRING_TO_UINTMAX_T_SOURCES = string-to-uintmax_t.c
STRING_TO_UINTMAX_T_BINARY = string-to-uintmax_t
UINTMAX_T_TO_STRING_SOURCES = uintmax_t-to-string.c
UINTMAX_T_TO_STRING_BINARY = uintmax_t-to-string
UNSIGNED_INT_TO_STRING_SOURCES = unsigned-int-to-string.c
UNSIGNED_INT_TO_STRING_BINARY = unsigned-int-to-string
UNSIGNED_LONG_TO_STRING_SOURCES = unsigned-long-to-string.c
UNSIGNED_LONG_TO_STRING_BINARY = unsigned-long-to-string
UNSIGNED_LONG_LONG_TO_STRING_SOURCES = unsigned-long-long-to-string.c
UNSIGNED_LONG_LONG_TO_STRING_BINARY = unsigned-long-long-to-string

# Attempt to compile with each sanitizer to check support
CHECK_SANITIZER = \
    $(shell echo "int main(){}" > sanitizer_check.c; \
    if $(CC) $(1) sanitizer_check.c -o /dev/null > /dev/null 2>&1; then echo $(1); fi; \
    rm -f sanitizer_check.c)

SUPPORTED_SANITIZERS +=$(call CHECK_SANITIZER,-fsanitize=address)
SUPPORTED_SANITIZERS +=$(call CHECK_SANITIZER,-fsanitize=undefined)
SUPPORTED_SANITIZERS +=$(call CHECK_SANITIZER,-fsanitize=leak)

ifeq ($(CC), gcc)
	ANALYSIS_FLAGS = -fanalyzer
	ANALYZER =
	ANALYZER_FLAGS =
else ifeq ($(CC), clang)
    CFLAGS += -Wdocumentation -Wshorten-64-to-32 -Wconstant-conversion -Wnullable-to-nonnull-conversion
	ANALYSIS_FLAGS = --analyze
	ANALYZER = scan-build
 	ANALYZER_FLAGS = -plist-html -o $(REPORT_DIR)
endif

# All rule to build all binaries, analyze, and run cppcheck
all: clang-format $(DOUBLE_TO_STRING_BINARY) $(FLOAT_TO_STRING_BINARY) $(INT_TO_STRING_BINARY) $(INTMAX_T_TO_STRING_BINARY) \
     $(LONG_TO_STRING_BINARY) $(LONG_DOUBLE_TO_STRING_BINARY) $(LONG_LONG_TO_STRING_BINARY) \
     $(STRING_TO_DOUBLE_BINARY) $(STRING_TO_FLOAT_BINARY) $(STRING_TO_INT_BINARY) $(STRING_TO_INTMAX_T_BINARY) \
     $(STRING_TO_LONG_BINARY) $(STRING_TO_LONG_DOUBLE_BINARY) $(STRING_TO_LONG_LONG_BINARY) \
     $(STRING_TO_UNSIGNED_INT_BINARY) $(STRING_TO_UNSIGNED_LONG_BINARY) $(STRING_TO_UNSIGNED_LONG_LONG_BINARY) \
     $(STRING_TO_UINTMAX_T_BINARY) $(UINTMAX_T_TO_STRING_BINARY) $(UNSIGNED_INT_TO_STRING_BINARY) \
     $(UNSIGNED_LONG_TO_STRING_BINARY) $(UNSIGNED_LONG_LONG_TO_STRING_BINARY) analyze clang-tidy cppcheck

# Build rules for each binary
$(DOUBLE_TO_STRING_BINARY): $(DOUBLE_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(DOUBLE_TO_STRING_BINARY) $(DOUBLE_TO_STRING_SOURCES)

$(FLOAT_TO_STRING_BINARY): $(FLOAT_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(FLOAT_TO_STRING_BINARY) $(FLOAT_TO_STRING_SOURCES)

$(INT_TO_STRING_BINARY): $(INT_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(INT_TO_STRING_BINARY) $(INT_TO_STRING_SOURCES)

$(INTMAX_T_TO_STRING_BINARY): $(INTMAX_T_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(INTMAX_T_TO_STRING_BINARY) $(INTMAX_T_TO_STRING_SOURCES)

$(LONG_TO_STRING_BINARY): $(LONG_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(LONG_TO_STRING_BINARY) $(LONG_TO_STRING_SOURCES)

$(LONG_DOUBLE_TO_STRING_BINARY): $(LONG_DOUBLE_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(LONG_DOUBLE_TO_STRING_BINARY) $(LONG_DOUBLE_TO_STRING_SOURCES)

$(LONG_LONG_TO_STRING_BINARY): $(LONG_LONG_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(LONG_LONG_TO_STRING_BINARY) $(LONG_LONG_TO_STRING_SOURCES)

$(STRING_TO_DOUBLE_BINARY): $(STRING_TO_DOUBLE_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_DOUBLE_BINARY) $(STRING_TO_DOUBLE_SOURCES)

$(STRING_TO_FLOAT_BINARY): $(STRING_TO_FLOAT_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_FLOAT_BINARY) $(STRING_TO_FLOAT_SOURCES)

$(STRING_TO_INT_BINARY): $(STRING_TO_INT_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_INT_BINARY) $(STRING_TO_INT_SOURCES)

$(STRING_TO_INTMAX_T_BINARY): $(STRING_TO_INTMAX_T_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_INTMAX_T_BINARY) $(STRING_TO_INTMAX_T_SOURCES)

$(STRING_TO_LONG_BINARY): $(STRING_TO_LONG_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_LONG_BINARY) $(STRING_TO_LONG_SOURCES)

$(STRING_TO_LONG_DOUBLE_BINARY): $(STRING_TO_LONG_DOUBLE_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_LONG_DOUBLE_BINARY) $(STRING_TO_LONG_DOUBLE_SOURCES)

$(STRING_TO_LONG_LONG_BINARY): $(STRING_TO_LONG_LONG_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_LONG_LONG_BINARY) $(STRING_TO_LONG_LONG_SOURCES)

$(STRING_TO_UNSIGNED_INT_BINARY): $(STRING_TO_UNSIGNED_INT_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_UNSIGNED_INT_BINARY) $(STRING_TO_UNSIGNED_INT_SOURCES)

$(STRING_TO_UNSIGNED_LONG_BINARY): $(STRING_TO_UNSIGNED_LONG_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_UNSIGNED_LONG_BINARY) $(STRING_TO_UNSIGNED_LONG_SOURCES)

$(STRING_TO_UNSIGNED_LONG_LONG_BINARY): $(STRING_TO_UNSIGNED_LONG_LONG_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_UNSIGNED_LONG_LONG_BINARY) $(STRING_TO_UNSIGNED_LONG_LONG_SOURCES)

$(STRING_TO_UINTMAX_T_BINARY): $(STRING_TO_UINTMAX_T_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STRING_TO_UINTMAX_T_BINARY) $(STRING_TO_UINTMAX_T_SOURCES)

$(UINTMAX_T_TO_STRING_BINARY): $(UINTMAX_T_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(UINTMAX_T_TO_STRING_BINARY) $(UINTMAX_T_TO_STRING_SOURCES)

$(UNSIGNED_INT_TO_STRING_BINARY): $(UNSIGNED_INT_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(UNSIGNED_INT_TO_STRING_BINARY) $(UNSIGNED_INT_TO_STRING_SOURCES)

$(UNSIGNED_LONG_TO_STRING_BINARY): $(UNSIGNED_LONG_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(UNSIGNED_LONG_TO_STRING_BINARY) $(UNSIGNED_LONG_TO_STRING_SOURCES)

$(UNSIGNED_LONG_LONG_TO_STRING_BINARY): $(UNSIGNED_LONG_LONG_TO_STRING_SOURCES)
	$(CC) $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(UNSIGNED_LONG_LONG_TO_STRING_BINARY) $(UNSIGNED_LONG_LONG_TO_STRING_SOURCES)

# Analyze rule to analyze all sources
analyze:
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(DOUBLE_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(FLOAT_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(INT_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(INTMAX_T_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(LONG_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(LONG_DOUBLE_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(LONG_LONG_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_DOUBLE_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_FLOAT_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_INT_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_INTMAX_T_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_LONG_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_LONG_DOUBLE_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_LONG_LONG_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_UNSIGNED_INT_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_UNSIGNED_LONG_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_UNSIGNED_LONG_LONG_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STRING_TO_UINTMAX_T_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(UINTMAX_T_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(UNSIGNED_INT_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(UNSIGNED_LONG_TO_STRING_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(UNSIGNED_LONG_LONG_TO_STRING_SOURCES) -c

# Clang-tidy rule to lint all sources
clang-tidy:
	clang-tidy $(DOUBLE_TO_STRING_SOURCES) $(FLOAT_TO_STRING_SOURCES) $(INT_TO_STRING_SOURCES) $(INTMAX_T_TO_STRING_SOURCES) \
	$(LONG_TO_STRING_SOURCES) $(LONG_DOUBLE_TO_STRING_SOURCES) $(LONG_LONG_TO_STRING_SOURCES) \
	$(STRING_TO_DOUBLE_SOURCES) $(STRING_TO_FLOAT_SOURCES) $(STRING_TO_INT_SOURCES) $(STRING_TO_INTMAX_T_SOURCES) \
	$(STRING_TO_LONG_SOURCES) $(STRING_TO_LONG_DOUBLE_SOURCES) $(STRING_TO_LONG_LONG_SOURCES) \
	$(STRING_TO_UNSIGNED_INT_SOURCES) $(STRING_TO_UNSIGNED_LONG_SOURCES) $(STRING_TO_UNSIGNED_LONG_LONG_SOURCES) \
	$(STRING_TO_UINTMAX_T_SOURCES) $(UINTMAX_T_TO_STRING_SOURCES) $(UNSIGNED_INT_TO_STRING_SOURCES) \
	$(UNSIGNED_LONG_TO_STRING_SOURCES) $(UNSIGNED_LONG_LONG_TO_STRING_SOURCES) \
	-quiet -checks='*,-cert-err33-c,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-readability-identifier-length,-llvmlibc-restrict-system-libc-headers,-cppcoreguidelines-init-variables,-altera-unroll-loops,-llvm-header-guard,-cppcoreguidelines-avoid-magic-numbers,-readability-magic-numbers' -- $(CFLAGS)

# Cppcheck rule to perform static analysis on all sources
cppcheck:
	cppcheck --enable=all --inconclusive --inline-suppr --suppress=missingIncludeSystem --checkers-report=$(CHECKER_REPORT_FILE) --quiet \
	$(DOUBLE_TO_STRING_SOURCES) $(FLOAT_TO_STRING_SOURCES) $(INT_TO_STRING_SOURCES) $(INTMAX_T_TO_STRING_SOURCES) \
	$(LONG_TO_STRING_SOURCES) $(LONG_DOUBLE_TO_STRING_SOURCES) $(LONG_LONG_TO_STRING_SOURCES) \
	$(STRING_TO_DOUBLE_SOURCES) $(STRING_TO_FLOAT_SOURCES) $(STRING_TO_INT_SOURCES) $(STRING_TO_INTMAX_T_SOURCES) \
	$(STRING_TO_LONG_SOURCES) $(STRING_TO_LONG_DOUBLE_SOURCES) $(STRING_TO_LONG_LONG_SOURCES) \
	$(STRING_TO_UNSIGNED_INT_SOURCES) $(STRING_TO_UNSIGNED_LONG_SOURCES) $(STRING_TO_UNSIGNED_LONG_LONG_SOURCES) \
	$(STRING_TO_UINTMAX_T_SOURCES) $(UINTMAX_T_TO_STRING_SOURCES) $(UNSIGNED_INT_TO_STRING_SOURCES) \
	$(UNSIGNED_LONG_TO_STRING_SOURCES) $(UNSIGNED_LONG_LONG_TO_STRING_SOURCES)

clang-format:
	clang-format -i -- $(DOUBLE_TO_STRING_SOURCES) $(FLOAT_TO_STRING_SOURCES) $(INT_TO_STRING_SOURCES) $(INTMAX_T_TO_STRING_SOURCES) \
	$(LONG_TO_STRING_SOURCES) $(LONG_DOUBLE_TO_STRING_SOURCES) $(LONG_LONG_TO_STRING_SOURCES) \
	$(STRING_TO_DOUBLE_SOURCES) $(STRING_TO_FLOAT_SOURCES) $(STRING_TO_INT_SOURCES) $(STRING_TO_INTMAX_T_SOURCES) \
	$(STRING_TO_LONG_SOURCES) $(STRING_TO_LONG_DOUBLE_SOURCES) $(STRING_TO_LONG_LONG_SOURCES) \
	$(STRING_TO_UNSIGNED_INT_SOURCES) $(STRING_TO_UNSIGNED_LONG_SOURCES) $(STRING_TO_UNSIGNED_LONG_LONG_SOURCES) \
	$(STRING_TO_UINTMAX_T_SOURCES) $(UINTMAX_T_TO_STRING_SOURCES) $(UNSIGNED_INT_TO_STRING_SOURCES) \
	$(UNSIGNED_LONG_TO_STRING_SOURCES) $(UNSIGNED_LONG_LONG_TO_STRING_SOURCES)

# Clean rule to remove binaries and reports
clean:
	rm -f $(DOUBLE_TO_STRING_BINARY) $(FLOAT_TO_STRING_BINARY) $(INT_TO_STRING_BINARY) $(INTMAX_T_TO_STRING_BINARY) \
	$(LONG_TO_STRING_BINARY) $(LONG_DOUBLE_TO_STRING_BINARY) $(LONG_LONG_TO_STRING_BINARY) \
	$(STRING_TO_DOUBLE_BINARY) $(STRING_TO_FLOAT_BINARY) $(STRING_TO_INT_BINARY) $(STRING_TO_INTMAX_T_BINARY) \
	$(STRING_TO_LONG_BINARY) $(STRING_TO_LONG_DOUBLE_BINARY) $(STRING_TO_LONG_LONG_BINARY) \
	$(STRING_TO_UNSIGNED_INT_BINARY) $(STRING_TO_UNSIGNED_LONG_BINARY) $(STRING_TO_UNSIGNED_LONG_LONG_BINARY) \
	$(STRING_TO_UINTMAX_T_BINARY) $(UINTMAX_T_TO_STRING_BINARY) $(UNSIGNED_INT_TO_STRING_BINARY) \
	$(UNSIGNED_LONG_TO_STRING_BINARY) $(UNSIGNED_LONG_LONG_TO_STRING_BINARY)
	rm -f $(CHECKER_REPORT_FILE)
	rm -rf $(REPORT_DIR)
	find . -name '*.plist' -delete
	find . -name '*.o' -delete
