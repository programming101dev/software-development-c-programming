ifeq ($(CC),cc)
    CC = gcc
endif

CFLAGS = -std=c17 -Wall -Wextra -Werror -pedantic -Wconversion -Wshadow -Wformat=2 -Winit-self -Wswitch-default \
         -Wswitch-enum -Wfloat-equal -Wcast-align -Wpointer-arith -Wmissing-prototypes -Wstrict-prototypes \
         -Wundef -Wstrict-overflow=5 -Wwrite-strings -Wredundant-decls -Winline -Wvla -Wdouble-promotion \
         -Wdeclaration-after-statement
SANITIZERS = -fsanitize=address -fsanitize=undefined -fsanitize=leak
SUPPORTED_SANITIZERS =
CHECKER_REPORT_FILE = cppcheck-report.txt
REPORT_DIR = scan-results

# Source and binary definitions for the new set of files
BLOCK_SCOPE_SOURCES = block-scope.c
BLOCK_SCOPE_BINARY = block-scope
FUNCTION_SCOPE_SOURCES = function-scope.c
FUNCTION_SCOPE_BINARY = function-scope
FILE_SCOPE_SOURCES = file-scope.c
FILE_SCOPE_BINARY = file-scope
FUNCTION_PROTOTYPE_SCOPE_SOURCES = function-prototype-scope.c
FUNCTION_PROTOTYPE_SCOPE_BINARY = function-prototype-scope
AUTOMATIC_VARIABLES_SOURCES = automatic-variables.c
AUTOMATIC_VARIABLES_BINARY = automatic-variables
STATIC_VARIABLES_INSIDE_FUNCTIONS_SOURCES = static-variables-inside-functions.c
STATIC_VARIABLES_INSIDE_FUNCTIONS_BINARY = static-variables-inside-functions
GLOBAL_VARIABLES_SOURCES = global-variables.c
GLOBAL_VARIABLES_BINARY = global-variables
STATIC_VARIABLES_AT_FILE_SCOPE_SOURCES = static-variables-at-file-scope.c
STATIC_VARIABLES_AT_FILE_SCOPE_BINARY = static-variables-at-file-scope
EXTERN_VARIABLES_SOURCES = extern-variables.c extern.c
EXTERN_VARIABLES_HEADERS = extern.h
EXTERN_VARIABLES_BINARY = extern-variables
PROPER_DECLARATION_SOURCES = proper-declaration.c
PROPER_DECLARATION_BINARY = proper-declaration
INITIALIZATION_SOURCES = initialization.c
INITIALIZATION_BINARY = initialization
BEST_PRACTICES_SOURCES = best-practices.c
BEST_PRACTICES_BINARY = best-practices
SHADOWING_SOURCES = shadowing.c
SHADOWING_BINARY = shadowing

# Attempt to compile with each sanitizer to check support
CHECK_SANITIZER = \
    $(shell echo "int main(){}" > sanitizer_check.c; \
    if $(CC) $(1) sanitizer_check.c -o /dev/null > /dev/null 2>&1; then echo $(1); fi; \
    rm -f sanitizer_check.c)

SUPPORTED_SANITIZERS +=$(call CHECK_SANITIZER,-fsanitize=address)
SUPPORTED_SANITIZERS +=$(call CHECK_SANITIZER,-fsanitize=undefined)
SUPPORTED_SANITIZERS +=$(call CHECK_SANITIZER,-fsanitize=leak)

ifeq ($(CC), gcc)
	ANALYSIS_FLAGS = -fanalyzer
	ANALYZER =
	ANALYZER_FLAGS =
else ifeq ($(CC), clang)
    CFLAGS += -Wdocumentation -Wshorten-64-to-32 -Wconstant-conversion -Wnullable-to-nonnull-conversion
	ANALYSIS_FLAGS = --analyze
	ANALYZER = scan-build
 	ANALYZER_FLAGS = -plist-html -o $(REPORT_DIR)
endif

# All rule to build all binaries, analyze, and run cppcheck
all: $(BLOCK_SCOPE_BINARY) $(FUNCTION_SCOPE_BINARY) $(FILE_SCOPE_BINARY) \
     $(FUNCTION_PROTOTYPE_SCOPE_BINARY) $(AUTOMATIC_VARIABLES_BINARY) \
     $(STATIC_VARIABLES_INSIDE_FUNCTIONS_BINARY) $(GLOBAL_VARIABLES_BINARY) \
     $(STATIC_VARIABLES_AT_FILE_SCOPE_BINARY) $(EXTERN_VARIABLES_BINARY) \
     $(PROPER_DECLARATION_BINARY) $(INITIALIZATION_BINARY) $(BEST_PRACTICES_BINARY) \
     $(SHADOWING_BINARY) analyze cppcheck clang-tidy

# Build rules for each binary
$(BLOCK_SCOPE_BINARY): $(BLOCK_SCOPE_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(BLOCK_SCOPE_BINARY) $(BLOCK_SCOPE_SOURCES)

$(FUNCTION_SCOPE_BINARY): $(FUNCTION_SCOPE_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(FUNCTION_SCOPE_BINARY) $(FUNCTION_SCOPE_SOURCES)

$(FILE_SCOPE_BINARY): $(FILE_SCOPE_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(FILE_SCOPE_BINARY) $(FILE_SCOPE_SOURCES)

$(FUNCTION_PROTOTYPE_SCOPE_BINARY): $(FUNCTION_PROTOTYPE_SCOPE_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(FUNCTION_PROTOTYPE_SCOPE_BINARY) $(FUNCTION_PROTOTYPE_SCOPE_SOURCES)

$(AUTOMATIC_VARIABLES_BINARY): $(AUTOMATIC_VARIABLES_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(AUTOMATIC_VARIABLES_BINARY) $(AUTOMATIC_VARIABLES_SOURCES)

$(STATIC_VARIABLES_INSIDE_FUNCTIONS_BINARY): $(STATIC_VARIABLES_INSIDE_FUNCTIONS_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STATIC_VARIABLES_INSIDE_FUNCTIONS_BINARY) $(STATIC_VARIABLES_INSIDE_FUNCTIONS_SOURCES)

$(GLOBAL_VARIABLES_BINARY): $(GLOBAL_VARIABLES_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(GLOBAL_VARIABLES_BINARY) $(GLOBAL_VARIABLES_SOURCES)

$(STATIC_VARIABLES_AT_FILE_SCOPE_BINARY): $(STATIC_VARIABLES_AT_FILE_SCOPE_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(STATIC_VARIABLES_AT_FILE_SCOPE_BINARY) $(STATIC_VARIABLES_AT_FILE_SCOPE_SOURCES)

$(EXTERN_VARIABLES_BINARY): $(EXTERN_VARIABLES_SOURCES) $(EXTERN_VARIABLES_HEADERS)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(EXTERN_VARIABLES_BINARY) $(EXTERN_VARIABLES_SOURCES)

$(PROPER_DECLARATION_BINARY): $(PROPER_DECLARATION_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(PROPER_DECLARATION_BINARY) $(PROPER_DECLARATION_SOURCES)

$(INITIALIZATION_BINARY): $(INITIALIZATION_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(INITIALIZATION_BINARY) $(INITIALIZATION_SOURCES)

$(BEST_PRACTICES_BINARY): $(BEST_PRACTICES_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(BEST_PRACTICES_BINARY) $(BEST_PRACTICES_SOURCES)

$(SHADOWING_BINARY): $(SHADOWING_SOURCES)
	$(CC) -std=c17 $(CFLAGS) $(SUPPORTED_SANITIZERS) -o $(SHADOWING_BINARY) $(SHADOWING_SOURCES)

# Analyze rule to analyze all sources and headers
analyze:
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(BLOCK_SCOPE_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(FUNCTION_SCOPE_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(FILE_SCOPE_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(FUNCTION_PROTOTYPE_SCOPE_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(AUTOMATIC_VARIABLES_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STATIC_VARIABLES_INSIDE_FUNCTIONS_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(GLOBAL_VARIABLES_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(STATIC_VARIABLES_AT_FILE_SCOPE_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(EXTERN_VARIABLES_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(PROPER_DECLARATION_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(INITIALIZATION_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(BEST_PRACTICES_SOURCES) -c
	$(ANALYZER) $(ANALYZER_FLAGS) $(CC) $(CFLAGS) $(ANALYSIS_FLAGS) $(SHADOWING_SOURCES) -c

# Clang-tidy rule to lint all sources and headers
clang-tidy:
	clang-tidy $(BLOCK_SCOPE_SOURCES) $(FUNCTION_SCOPE_SOURCES) $(FILE_SCOPE_SOURCES) \
	$(FUNCTION_PROTOTYPE_SCOPE_SOURCES) $(AUTOMATIC_VARIABLE_SOURCES) $(STATIC_VARIABLES_INSIDE_FUNCTIONS_SOURCES) \
	$(GLOBAL_VARIABLES_SOURCES) $(STATIC_VARIABLES_AT_FILE_SCOPE_SOURCES) $(EXTERN_VARIABLES_SOURCES) $(EXTERN_VARIABLES_HEADERS) \
	$(PROPER_DECLARATION_SOURCES) $(INITIALIZATION_SOURCES) $(BEST_PRACTICES_SOURCES) $(SHADOWING_SOURCES) \
	-quiet -checks='*,-cert-err33-c,-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,-readability-identifier-length,-llvmlibc-restrict-system-libc-headers,-cppcoreguidelines-init-variables,-altera-unroll-loops,-llvm-header-guard' -- $(CFLAGS)

# Cppcheck rule to perform static analysis on all sources and headers
cppcheck:
	cppcheck --enable=all --inconclusive --suppress=missingIncludeSystem --checkers-report=$(CHECKER_REPORT_FILE) --quiet \
	$(BLOCK_SCOPE_SOURCES) $(FUNCTION_SCOPE_SOURCES) $(FILE_SCOPE_SOURCES) $(FUNCTION_PROTOTYPE_SCOPE_SOURCES) \
	$(AUTOMATIC_VARIABLES_SOURCES) $(STATIC_VARIABLES_INSIDE_FUNCTIONS_SOURCES) $(GLOBAL_VARIABLES_SOURCES) \
	$(STATIC_VARIABLES_AT_FILE_SCOPE_SOURCES) $(EXTERN_VARIABLES_SOURCES) $(EXTERN_VARIABLES_HEADERS) \
	$(PROPER_DECLARATION_SOURCES) $(INITIALIZATION_SOURCES) $(BEST_PRACTICES_SOURCES) $(SHADOWING_SOURCES)

# Clean rule to remove binaries and reports
clean:
	rm -f $(BLOCK_SCOPE_BINARY) $(FUNCTION_SCOPE_BINARY) $(FILE_SCOPE_BINARY) \
	      $(FUNCTION_PROTOTYPE_SCOPE_BINARY) $(AUTOMATIC_VARIABLES_BINARY) \
	      $(STATIC_VARIABLES_INSIDE_FUNCTIONS_BINARY) $(GLOBAL_VARIABLES_BINARY) \
	      $(STATIC_VARIABLES_AT_FILE_SCOPE_BINARY) $(EXTERN_VARIABLES_BINARY) \
	      $(PROPER_DECLARATION_BINARY) $(INITIALIZATION_BINARY) $(BEST_PRACTICES_BINARY) \
	      $(SHADOWING_BINARY)
	rm -f $(CHECKER_REPORT_FILE)
	rm -rf $(REPORT_DIR)
	find . -name '*.plist' -delete
	find . -name '*.o' -delete
